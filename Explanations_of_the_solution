## Анализ проблем в коде файла  main_original_version.py

#### **1. Низкий уровень абстракции**

**Проблема**:
 Класс `Account` напрямую управляет балансом через `bank.accounts[...].balance`, что нарушает инкапсуляцию.
**Где, в каком месте**:
В методах `deposit()` и `withdraw()` класса `Account`.
**Почему это плохая реализация**:
Логика работы с балансом должна быть внутри `Account`, а не зависеть от внешнего доступа к словарю `bank.accounts`.

#### **2. Высокая связность**
**Проблема**:
 Классы `Account`, `Customer` и `Bank` сильно зависят друг от друга.
  - `Account` знает о внутренней структуре `Bank` (обращается к `bank.accounts`).
  - `Customer` зависит от `Bank` и генерирует номер счета, хотя это ответственность `Bank`.
**Где, в каком месте**:
 Взаимодействие между `Account`, `Bank` и `Customer`.
**Почему это плохая реализация**:
 Изменение в одном классе (например, структуры хранения счетов в `Bank`) потребует изменений в других.

#### **3. Низкая цельность (нарушение SRP)**
**Проблема**:
  - `Customer` занимается генерацией номера счета (`_generate_account_number()`), хотя это должно быть в `Bank`.
  - `Bank` управляет созданием счетов и их хранением, но не скрывает детали реализации (например, прямой доступ к `accounts`).
**Где, в каком месте**:
 Метод `_generate_account_number()` в `Customer`, открытый доступ к `accounts` в `Bank`.
**Почему это плохая реализация**:
 Классы берут на себя несвойственные им обязанности.

#### **4. Проблемы с компоновкой**
**Проблема**:
 Логика размазана по разным классам:
  - `Customer` открывает счет, но `Bank` его создает.
  - `Account` не управляет своим состоянием самостоятельно (баланс меняется через `Bank`).
**Где, в каком месте**:
 Взаимодействие между `Customer.open_account()`, `Bank.create_account()` и `Account`.
**Почему это плохая реализация**:
 Запутанная схема взаимодействия усложняет поддержку.


## В **файле main.py** реализована улучшенная версия предложенного кода.

### **Предложены следующие улучшения**

1. **Повышение уровня абстракции**:
   - Данные клиента вынесены в отдельный класс `CustomerInfo`.
   - `Account` теперь управляет своим балансом самостоятельно (без обращения к `Bank`).

2. **Уменьшение связности**:
   - `Account` больше не зависит от внутренней структуры `Bank`.
   - `Bank` инкапсулирует хранение счетов (`_accounts`) и их генерацию.

3. **Улучшение цельности (SRP)**:
   - `Customer` отвечает только за взаимодействие с `Bank`, но не за генерацию номера счета.
   - `Bank` отвечает за создание и хранение счетов, `Account` — за операции с балансом.

4. **Оптимизация компоновки**:
   - Логика генерации номера счета перемещена в `Bank`.
   - Данные клиента (`name`, `address`) инкапсулированы в `CustomerInfo`.

**Что получили в итоге**:
 Код стал более модульным, легче тестируется и масштабируется.